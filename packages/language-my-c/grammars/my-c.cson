# If this is your first time writing a language grammar, check out:
#   - https://flight-manual.atom.io/hacking-atom/sections/creating-a-grammar/

'scopeName': 'source.my-c'
'name': 'MyC'
'fileTypes': [
  'c'
  'h'
]
'patterns': [
  #override the existing source.c comments
  {
    'include': '#comments'
  }
  {
    'include': 'source.c'
  }

]
'repository':
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.block.c'
        'match': '^/\\* =(\\s*.*?)\\s*= \\*/$\\n?'
        'name': 'comment.block.c'
      }
      {
        'begin': '/\\*[^*]' #to make the doxygen comments unique
        'beginCaptures':
          '0':
            'name': 'punctuation.definition.comment.begin.c'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'punctuation.definition.comment.end.c'
        'name': 'comment.block.c'
      }
      # My custom comment banners
      {
        'begin': '//={1,}\\n'
        'beginCaptures':
          '0':
            'name': 'punctuation.comment.banner.end.c'
        'end': '//={1,}\\n'
        'endCaptures':
          '0':
            'name': 'punctuation.comment.banner.end.c'
        'name': 'comment.banner.c'
      }
      # doxygen comments
      {
        'begin': '/(\\*){2}'
        'beginCaptures':
          '1':
            'name': 'comment.doxygen.begin.c'
        'end': '\\*/'
        'endCaptures':
          '0':
            'name': 'comment.doxygen.end.c'
        'name': 'comment.doxygen.c'
        'patterns':[
            {
                'match': '@(brief|header|pre|post|param|return|\\{|\\}|addtogroup)'
                'name': 'comment.doxygen.command.c'
            }
        ]
      }
      # doxygen commands
      # {
      #   'match': '@(brief|header|pre|post|param|return)'
      #   'name': 'comment.doxygen.command.c'
      # }
      # doxygen comment begins
      {
        'match': '/(\\*){2}'
        'name': 'comment.doxygen.begin.c'
      }
      # doxygen comment ends
      {
        'match': '\\*/'
        'name': 'comment.doxygen.end.c'
      }
      # banner comment begin and end
      {
        'match': '//={1,}'
        'name': 'punctuation.comment.banner.end.c'
      }
      {
        'match': '\\*/.*\\n'
        'name': 'invalid.illegal.stray-comment-end.c'
      }
      {
        'captures':
          '1':
            'name': 'meta.toc-list.banner.line.c'
        'match': '^// =(\\s*.*?)\\s*=\\s*$\\n?'
        'name': 'comment.line.banner.cpp'
      }
      {
        'begin': '(^[ \\t]+)?(?=//)'
        'beginCaptures':
          '1':
            'name': 'punctuation.whitespace.comment.leading.cpp'
        'end': '(?!\\G)'
        'patterns': [
          {
            'begin': '//'
            'beginCaptures':
              '0':
                'name': 'punctuation.definition.comment.cpp'
            'end': '(?=\\n)'
            'name': 'comment.line.double-slash.cpp'
            'patterns': [
              {
                'include': '#line_continuation_character'
              }
            ]
          }
        ]
      }
    ]
